# -*- coding: utf-8 -*-

"""
/***************************************************************************
 ProcessingUMEP
                                 A QGIS plugin
 UMEP for processing toolbox
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2020-04-02
        copyright            : (C) 2020 by Fredrik Lindberg
        email                : fredrikl@gvc.gu.se
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""

__author__ = 'Fredrik Lindberg'
__date__ = '2020-04-02'
__copyright__ = '(C) 2020 by Fredrik Lindberg'

# This will get replaced with a git SHA1 when you do a git archive

__revision__ = '$Format:%H$'

import gzip
import shutil
from osgeo import gdal, osr, ogr
from osgeo.gdalconst import *
import os
import numpy as np
import inspect
from pathlib import Path
import supy as sp
# import zipfile
import sys
# from ..util import misc
# # from ..functions import svf_functions as svf
# from osgeo import gdal
# import subprocess
import datetime
# import webbrowser
# try:
#     import supy as sp
#     from supy import __version__ as ver_supy
# except:
#     QMessageBox.critical(None, 'Error', 'This plugin requires the supy package '
#                         'to be installed OR upgraded. Please consult the FAQ in the manual '
#                         'for further information on how to install missing python packages.')
#     pass

import logging


class ProcessingCopernicusERA5Algorithm:
    def __init__(self, input_point, crs, start_date, end_date, output_dir, diag_height):
        """
        Initialize the algorithm with parameters.
        """
        self.input_point = input_point  # Tuple (x, y)
        self.crs = crs  # CRS as WKT or EPSG code
        self.start_date = start_date  # Start date in ISO format
        self.end_date = end_date  # End date in ISO format
        self.output_dir = output_dir  # Directory for output files
        self.diag_height = diag_height  # Diagnostic height above ground level

    def run(self):
        """
        Main processing logic.
        """
        # Check if SuPy is available
        try:
            from supy import __version__ as ver_supy
        except ImportError:
            raise RuntimeError(
                "This script requires the 'supy' package. Please install it using pip."
            )

        # Validate input dates
        if self.start_date >= self.end_date:
            raise ValueError("Start date must be earlier than end date.")

        # Ensure output directory exists
        if not os.path.exists(self.output_dir):
            os.makedirs(self.output_dir, exist_ok=True)

        # Convert point to lat/lon using the specified CRS
        lat, lon = self._transform_to_latlon(self.input_point, self.crs)

        # Logging for debugging
        logging.info(f"SuPy version: {ver_supy}")
        logging.info(f"INPUT PARAMETERS:")
        logging.info(f"Latitude: {lat}")
        logging.info(f"Longitude: {lon}")
        logging.info(f"Start date: {self.start_date}")
        logging.info(f"End date: {self.end_date}")
        logging.info(f"Diagnostic height: {self.diag_height}")
        logging.info(f"Output folder: {self.output_dir}")

        # Run SuPy processing
        sp.util.gen_forcing_era5(
            lat,
            lon,
            self.start_date,
            self.end_date,
            hgt_agl_diag=self.diag_height,
            dir_save=Path(self.output_dir),
        )

        logging.info("Processing complete.")
        return {"output_dir": self.output_dir}

    @staticmethod
    def _transform_to_latlon(point, crs):
        """
        Transform a point from a given CRS to WGS84 (lat/lon).
        """
        # Define source CRS
        src_cs = osr.SpatialReference()
        if isinstance(crs, int):
            src_cs.ImportFromEPSG(crs)
        else:
            src_cs.ImportFromWkt(crs)

        # Define target CRS (WGS84)
        target_cs = osr.SpatialReference()
        target_cs.ImportFromEPSG(4326)

        # Transform coordinates
        transform = osr.CoordinateTransformation(src_cs, target_cs)
        geometry = ogr.CreateGeometryFromWkt(f"POINT ({point[0]} {point[1]})")
        geometry.Transform(transform)

        return geometry.GetY(), geometry.GetX()


# Example usage:
if __name__ == "__main__":
    logging.basicConfig(level=logging.INFO)

    # Define input parameters
    input_point = (121809, 486328)  # Example coordinates
    crs = 28992  # EPSG code for WGS84
    start_date = "2000-01-01T00:00:00"
    end_date = "2000-01-02T00:00:00"
    output_dir = "./output"
    diag_height = 10.0


    # Initialize and run the algorithm
    processor = ProcessingCopernicusERA5Algorithm(
        input_point, crs, start_date, end_date, output_dir, diag_height
    )
    results = processor.run()

    print("Results:", results)
