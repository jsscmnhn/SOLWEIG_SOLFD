# -*- coding: utf-8 -*-
# TO DO: CREATE DIR IF DOESNT EXIST YET
import sys
import os
sys.path.append(os.path.abspath(os.path.join(os.path.dirname(__file__), '..')))
import cProfile
import pstats
import numpy as np
from rasterio import Affine
"""
/***************************************************************************
 ProcessingUMEP
                                 A QGIS plugin
 UMEP for processing toolbox
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2020-04-02
        copyright            : (C) 2020 by Fredrik Lindberg
        email                : fredrikl@gvc.gu.se
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""

__author__ = 'Fredrik Lindberg'
__date__ = '2020-04-02'
__copyright__ = '(C) 2020 by Fredrik Lindberg'

# This will get replaced with a git SHA1 when you do a git archive

__revision__ = '$Format:%H$'

from osgeo import gdal, osr
from osgeo.gdalconst import *
import os
import numpy as np
import inspect
from pathlib import Path
import zipfile
import sys
from util import misc
from functions import svf_functions_original as svf


class ProcessingSkyViewFactorAlgorithm():
    """
    This algorithm is a processing version of SkyViewFactor
    """
    def __init__(self, INPUT_DSM, INPUT_CDSM, OUTPUT_DIR, OUTPUT_FILE, INPUT_DTM=None, INPUT_EXTRAHEIGHT=6, INPUT_MULT_DSMS = None, INPUT_TDSM=None, USE_VEG=True, TRANS_VEG=3,
                 TSDM_EXIST=False, INPUT_THEIGHT=25.0, ANISO=True,
                 ):
        self.INPUT_DSM = INPUT_DSM
        self.INPUT_CDSM = INPUT_CDSM
        self.INPUT_TDSM = INPUT_TDSM
        self.INPUT_DTM = INPUT_DTM
        self.USE_VEG = USE_VEG
        self.TRANS_VEG = TRANS_VEG
        self.TSDM_EXIST = TSDM_EXIST
        self.INPUT_THEIGHT = INPUT_THEIGHT
        self.INPUT_EXTRAHEIGHT = INPUT_EXTRAHEIGHT
        self.MULT_DSMS = INPUT_MULT_DSMS
        self.ANISO = ANISO
        self.OUTPUT_DIR = OUTPUT_DIR
        self.OUTPUT_FILE = OUTPUT_FILE

    def processAlgorithm(self, parameters, context, feedback):
        # InputParameters
        # InputParameters
        outputDir = self.OUTPUT_DIR
        outputFile = self.OUTPUT_FILE
        dsmlayer = self.INPUT_DSM
        # usevegdem = self.USE_VEG
        transVeg = float(self.TRANS_VEG)
        vegdsm = self.INPUT_CDSM
        vegdsm2 = self.INPUT_TDSM
        # tdsmExists = self.parameterAsBool(parameters, self.TSDM_EXIST, context)
        trunkr = float(self.INPUT_THEIGHT)
        aniso = bool(self.ANISO)
        dtm_path = self.INPUT_DTM


        feedback.setProgressText('Initiating algorithm')

        if parameters['OUTPUT_DIR'] == 'TEMPORARY_OUTPUT':
            if not (os.path.isdir(outputDir)):
                os.mkdir(outputDir)

        provider = dsmlayer.dataProvider()
        filepath_dsm = str(provider.dataSourceUri())
        gdal_dsm = gdal.Open(filepath_dsm)
        dsm = gdal_dsm.ReadAsArray().astype(float)

        # response to issue #85
        nd = gdal_dsm.GetRasterBand(1).GetNoDataValue()
        dsm[dsm == nd] = 0.
        if dsm.min() < 0:
            dsm = dsm + np.abs(dsm.min())

        sizex = dsm.shape[0]
        sizey = dsm.shape[1]

        geotransform = gdal_dsm.GetGeoTransform()
        scale = 1 / geotransform[1]

        trans = transVeg / 100.0

        if vegdsm:
            usevegdem = 1
            feedback.setProgressText('Vegetation scheme activated')
            # vegdsm = self.parameterAsRasterLayer(parameters, self.INPUT_CDSM, context)
            # if vegdsm is None:
            # raise QgsProcessingException("Error: No valid vegetation DSM selected")

            # load raster
            gdal.AllRegister()
            provider = vegdsm.dataProvider()
            filePathOld = str(provider.dataSourceUri())
            dataSet = gdal.Open(filePathOld)
            vegdsm = dataSet.ReadAsArray().astype(float)

            vegsizex = vegdsm.shape[0]
            vegsizey = vegdsm.shape[1]

            if not (vegsizex == sizex) & (vegsizey == sizey):
                raise (
                    "Error in Vegetation Canopy DSM: All rasters must be of same extent and resolution")

            if vegdsm2:
                # vegdsm2 = self.parameterAsRasterLayer(parameters, self.INPUT_TDSM, context)
                # if vegdsm2 is None:
                # raise QgsProcessingException("Error: No valid Trunk zone DSM selected")

                # load raster
                gdal.AllRegister()
                provider = vegdsm2.dataProvider()
                filePathOld = str(provider.dataSourceUri())
                dataSet = gdal.Open(filePathOld)
                vegdsm2 = dataSet.ReadAsArray().astype(float)
            else:
                trunkratio = trunkr / 100.0
                vegdsm2 = vegdsm * trunkratio

            vegsizex = vegdsm2.shape[0]
            vegsizey = vegdsm2.shape[1]

            if not (vegsizex == sizex) & (vegsizey == sizey):
                raise (
                    "Error in Trunk Zone DSM: All rasters must be of same extent and resolution")
        else:
            rows = dsm.shape[0]
            cols = dsm.shape[1]
            vegdsm = np.zeros([rows, cols])
            vegdsm2 = 0.
            usevegdem = 0

        if aniso == 1:
            feedback.setProgressText('Calculating SVF using 153 iterations')
            ret = svf.svfForProcessing153(dsm, vegdsm, vegdsm2, scale, usevegdem, feedback)
        else:
            feedback.setProgressText('Calculating SVF using 655 iterations')
            ret = svf.svfForProcessing655(dsm, vegdsm, vegdsm2, scale, usevegdem, feedback)

        filename = outputFile

        # temporary fix for mac, ISSUE #15
        pf = sys.platform
        if pf == 'darwin' or pf == 'linux2' or pf == 'linux':
            if not os.path.exists(outputDir):
                os.makedirs(outputDir)

        if ret is not None:
            svfbu = ret["svf"]
            svfbuE = ret["svfE"]
            svfbuS = ret["svfS"]
            svfbuW = ret["svfW"]
            svfbuN = ret["svfN"]

            misc.saveraster(gdal_dsm, outputDir + '/' + 'svf.tif', svfbu)
            misc.saveraster(gdal_dsm, outputDir + '/' + 'svfE.tif', svfbuE)
            misc.saveraster(gdal_dsm, outputDir + '/' + 'svfS.tif', svfbuS)
            misc.saveraster(gdal_dsm, outputDir + '/' + 'svfW.tif', svfbuW)
            misc.saveraster(gdal_dsm, outputDir + '/' + 'svfN.tif', svfbuN)

            if os.path.isfile(outputDir + '/' + 'svfs.zip'):
                os.remove(outputDir + '/' + 'svfs.zip')

            zippo = zipfile.ZipFile(outputDir + '/' + 'svfs.zip', 'a')
            zippo.write(outputDir + '/' + 'svf.tif', 'svf.tif')
            zippo.write(outputDir + '/' + 'svfE.tif', 'svfE.tif')
            zippo.write(outputDir + '/' + 'svfS.tif', 'svfS.tif')
            zippo.write(outputDir + '/' + 'svfW.tif', 'svfW.tif')
            zippo.write(outputDir + '/' + 'svfN.tif', 'svfN.tif')
            zippo.close()

            os.remove(outputDir + '/' + 'svf.tif')
            os.remove(outputDir + '/' + 'svfE.tif')
            os.remove(outputDir + '/' + 'svfS.tif')
            os.remove(outputDir + '/' + 'svfW.tif')
            os.remove(outputDir + '/' + 'svfN.tif')

            if usevegdem == 0:
                svftotal = svfbu
            else:
                # report the result
                svfveg = ret["svfveg"]
                svfEveg = ret["svfEveg"]
                svfSveg = ret["svfSveg"]
                svfWveg = ret["svfWveg"]
                svfNveg = ret["svfNveg"]
                svfaveg = ret["svfaveg"]
                svfEaveg = ret["svfEaveg"]
                svfSaveg = ret["svfSaveg"]
                svfWaveg = ret["svfWaveg"]
                svfNaveg = ret["svfNaveg"]

                misc.saveraster(gdal_dsm, outputDir + '/' + 'svfveg.tif', svfveg)
                misc.saveraster(gdal_dsm, outputDir + '/' + 'svfEveg.tif', svfEveg)
                misc.saveraster(gdal_dsm, outputDir + '/' + 'svfSveg.tif', svfSveg)
                misc.saveraster(gdal_dsm, outputDir + '/' + 'svfWveg.tif', svfWveg)
                misc.saveraster(gdal_dsm, outputDir + '/' + 'svfNveg.tif', svfNveg)
                misc.saveraster(gdal_dsm, outputDir + '/' + 'svfaveg.tif', svfaveg)
                misc.saveraster(gdal_dsm, outputDir + '/' + 'svfEaveg.tif', svfEaveg)
                misc.saveraster(gdal_dsm, outputDir + '/' + 'svfSaveg.tif', svfSaveg)
                misc.saveraster(gdal_dsm, outputDir + '/' + 'svfWaveg.tif', svfWaveg)
                misc.saveraster(gdal_dsm, outputDir + '/' + 'svfNaveg.tif', svfNaveg)

                zippo = zipfile.ZipFile(outputDir + '/' + 'svfs.zip', 'a')
                zippo.write(outputDir + '/' + 'svfveg.tif', 'svfveg.tif')
                zippo.write(outputDir + '/' + 'svfEveg.tif', 'svfEveg.tif')
                zippo.write(outputDir + '/' + 'svfSveg.tif', 'svfSveg.tif')
                zippo.write(outputDir + '/' + 'svfWveg.tif', 'svfWveg.tif')
                zippo.write(outputDir + '/' + 'svfNveg.tif', 'svfNveg.tif')
                zippo.write(outputDir + '/' + 'svfaveg.tif', 'svfaveg.tif')
                zippo.write(outputDir + '/' + 'svfEaveg.tif', 'svfEaveg.tif')
                zippo.write(outputDir + '/' + 'svfSaveg.tif', 'svfSaveg.tif')
                zippo.write(outputDir + '/' + 'svfWaveg.tif', 'svfWaveg.tif')
                zippo.write(outputDir + '/' + 'svfNaveg.tif', 'svfNaveg.tif')
                zippo.close()

                os.remove(outputDir + '/' + 'svfveg.tif')
                os.remove(outputDir + '/' + 'svfEveg.tif')
                os.remove(outputDir + '/' + 'svfSveg.tif')
                os.remove(outputDir + '/' + 'svfWveg.tif')
                os.remove(outputDir + '/' + 'svfNveg.tif')
                os.remove(outputDir + '/' + 'svfaveg.tif')
                os.remove(outputDir + '/' + 'svfEaveg.tif')
                os.remove(outputDir + '/' + 'svfSaveg.tif')
                os.remove(outputDir + '/' + 'svfWaveg.tif')
                os.remove(outputDir + '/' + 'svfNaveg.tif')

                trans = transVeg / 100.0
                svftotal = (svfbu - (1 - svfveg) * (1 - trans))

            misc.saveraster(gdal_dsm, filename, svftotal)

            # Save shadow images for SOLWEIG 2019a
            if aniso == 1:
                shmat = ret["shmat"]
                vegshmat = ret["vegshmat"]
                vbshvegshmat = ret["vbshvegshmat"]
                # wallshmat = ret["wallshmat"]
                # wallsunmat = ret["wallsunmat"]
                # wallshvemat = ret["wallshvemat"]
                # facesunmat = ret["facesunmat"]

                np.savez_compressed(outputDir + '/' + "shadowmats.npz", shadowmat=shmat, vegshadowmat=vegshmat,
                                    vbshmat=vbshvegshmat)  # ,
                # vbshvegshmat=vbshvegshmat, wallshmat=wallshmat, wallsunmat=wallsunmat,
                # facesunmat=facesunmat, wallshvemat=wallshvemat)

        feedback.setProgressText("Sky View Factor: SVF grid(s) successfully generated")

        return {self.OUTPUT_DIR: outputDir, self.OUTPUT_FILE: outputFile}

if __name__ == "__main__":

    # ===================== normal test case ==============================
    #     INPUT_DSM = "D:/Geomatics/thesis/oldwallvsnewwallmethod/option2/final_dsm.tif"
    #     INPUT_CDSM =  "D:/Geomatics/thesis/oldwallvsnewwallmethod/option2/CHM.tif"
    #     OUTPUT_DIR = "D:/Geomatics/thesis/oldwallvsnewwallmethod/option2/svfs_pet"
    #     OUTPUT_FILE = f"profiling/wcstest"
    #     INPUT_DTM = "D:/Geomatics/thesis/oldwallvsnewwallmethod/option2/final_dtm.tif"
    #
    #     with cProfile.Profile() as profiler2:
    #         ProcessingSkyViewFactorAlgorithm(INPUT_DSM, INPUT_CDSM, OUTPUT_DIR, OUTPUT_FILE,
    #                                          INPUT_DTM=INPUT_DTM).processAlgorithm()

    D = 'D'
    folder_list = ['250', '500', '1000', '1500', '2000', '3000']

    for folder in folder_list:
        INPUT_DSM = f"{D}:/Geomatics/optimization_tests/{folder}/final_dsm_over.tif"
        INPUT_CDSM = f"{D}:/Geomatics/optimization_tests/{folder}/CHM.tif"
        OUTPUT_DIR = f"{D}:/Geomatics/optimization_tests/{folder}/svf_umep_trees"
        OUTPUT_FILE = f"{D}:/Geomatics/optimization_tests/{folder}/output.tif"

        dump_stats = f"{D}:/Geomatics/optimization_tests/{folder}/svf_profile_results_umep_chm.prof"

        test = ProcessingSkyViewFactorAlgorithm(INPUT_DSM, INPUT_CDSM, OUTPUT_DIR, OUTPUT_FILE)

        with cProfile.Profile() as profiler:
            test.processAlgorithm()

        # Print profiling results
        stats = pstats.Stats(profiler)
        stats.sort_stats('cumulative')
        stats.print_stats(20)

        stats.dump_stats(dump_stats)

        txt_output = f"{D}:/Geomatics/optimization_tests/{folder}/svf_profile_results_umep_chm.txt"
        with open(txt_output, "w") as f:
            stats = pstats.Stats(profiler, stream=f)
            stats.sort_stats('cumulative')
            stats.print_stats(20)

        D = 'D'
        folder_list = ['250', '500', '1000', '1500', '2000', '3000']

        for folder in folder_list:
            INPUT_DSM = f"{D}:/Geomatics/optimization_tests/{folder}/final_dsm_over.tif"
            INPUT_CDSM = None
            OUTPUT_DIR = f"{D}:/Geomatics/optimization_tests/{folder}/svf_umep"
            OUTPUT_FILE = f"{D}:/Geomatics/optimization_tests/{folder}/output.tif"

            dump_stats = f"{D}:/Geomatics/optimization_tests/{folder}/svf_profile_results_umep.prof"

            test = ProcessingSkyViewFactorAlgorithm(INPUT_DSM, INPUT_CDSM, OUTPUT_DIR, OUTPUT_FILE)

            with cProfile.Profile() as profiler:
                test.processAlgorithm()

            # Print profiling results
            stats = pstats.Stats(profiler)
            stats.sort_stats('cumulative')
            stats.print_stats(20)

            stats.dump_stats(dump_stats)

            txt_output = f"{D}:/Geomatics/optimization_tests/{folder}/svf_profile_results_umep.txt"
            with open(txt_output, "w") as f:
                stats = pstats.Stats(profiler, stream=f)
                stats.sort_stats('cumulative')
                stats.print_stats(20)